import { Context, Scenes, session, Telegraf } from "telegraf";

import { menuButton } from "../buttons/menuButton";
const words = require('../text/words')
import { exitButton } from "../buttons/exitButton";
import { phoneButton } from "../buttons/phoneButton";

const { enter, leave } = Scenes.Stage;
const sendQuestion = require('../actions/sendQuestion')

let userName: string, phoneUser: string, questionUser: string
 
export const anketaBranch = (bot: Telegraf<Scenes.SceneContext>) => {

  const greeterScene = new Scenes.BaseScene<Scenes.SceneContext>("greeter");
  greeterScene.enter(async ctx => {

    await ctx.reply(
              `–Ø–∫—â–æ —É –í–∞—Å –∑–∞–ª–∏—à–∏–ª–∏—Å—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∑ –ø–∏—Ç–∞–Ω–Ω—è–º –≤ —Ü—ñ–π –∞–Ω–∫–µ—Ç—ñ —ñ –Ω–∞—à—ñ –≤–∏–∫–ª–∞–¥–∞—á—ñ –∑ –í–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è`
          );
          await ctx.reply(`–í–≤–µ–¥—ñ—Ç—å –í–∞—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ (–ü—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç–∞): `, exitButton);
  });
  // greeterScene.leave(ctx => ctx.reply("Bye"));
  greeterScene.hears("hi", enter<Scenes.SceneContext>("greeter"));
  greeterScene.on("text", async ctx => {
    userName = ctx.message?.text;
    if (userName && ctx.message.text !== '‚¨ÖÔ∏è –í–∏—Ö—ñ–¥' && ctx.message.text!=='üìë –ó–∞–ª–∏—à–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É') {
      await ctx.reply(`–î—è–∫—É—î–º–æ ${userName} –º–∏ –∑–±–µ—Ä–µ–≥–ª–∏ –≤ –∞–Ω–∫–µ—Ç—ñ –í–∞—à–µ —ñ–º—è`);
      leave<Scenes.SceneContext>()
   
      ctx.scene.enter('phone')
     
    } else {
      leave<Scenes.SceneContext>()
      getStartMenu(ctx)
    }
  });



  const phoneScene = new Scenes.BaseScene<Scenes.SceneContext>("phone");
  phoneScene.enter(async ctx => {

    await ctx.reply('–í—ñ–¥–ø—Ä–∞–≤—å—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', phoneButton);
    phoneScene.on('message', async ctx => {
    
      if (ctx.message && 'contact' in ctx.message) {
  
        const phoneNumber = ctx.message.contact;
        if (phoneNumber && 'phone_number' in phoneNumber) {
          phoneUser = ctx.message.contact.phone_number
ctx.scene.enter('question')
        } else {
          leave<Scenes.SceneContext>()
               await getStartMenu(ctx)
        }
      } else {
        leave<Scenes.SceneContext>()
            await getStartMenu(ctx)
      }
    }
      )



  });
  
// phoneScene.leave(ctx => ctx.reply("exiting echo scene"));
phoneScene.command("back", leave<Scenes.SceneContext>());
// phoneScene.on("text", ctx => ctx.reply(ctx.message.text));
  // phoneScene.on("message", ctx => ctx.reply("Only text messages please"));
  
  const questionScene = new Scenes.BaseScene<Scenes.SceneContext>("question");
  questionScene.enter(async ctx => {
    await ctx.reply(`–ó–∞–ª–∏—à—Ç–µ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:`, exitButton);

    questionScene.on('text', async ctx => {
               
      if (ctx.message.text) {
        questionUser = ctx.message.text;
        leave<Scenes.SceneContext>()
        await ctx.reply(
          '–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –∑–∞–ø–∏—Ç, —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å –í–∞–º –Ω–∞–¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—é—Ç—å.',
          menuButton
        );
                        
        sendQuestion(userName, phoneUser, questionUser);
       
      }
    }
    
      )



  });


  const stage = new Scenes.Stage<Scenes.SceneContext>([greeterScene, phoneScene,questionScene], {
    ttl: 10,
  });
  bot.use(session());
  bot.use(stage.middleware());
  bot.command("greeter", ctx => ctx.scene.enter("greeter"));
  bot.command("phone", ctx => ctx.scene.enter("phone"));
  

  const getStartMenu = async (ctx: Context) => {
    await ctx.reply(
      `–Ø–∫—â–æ —Ç–∏ –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç —ñ —É —Ç–µ–±–µ —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –≤—Å—Ç—É–ø—É —á–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à—ñ–π –∫–∞—Ñ–µ–¥—Ä—ñ, —Ç–æ —Ç–∏—Å–Ω–∏ "–ê–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç".
    
    –Ø–∫—â–æ —Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç —ñ —Ö–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É, —Ç–æ —Ç–∏—Å–Ω–∏ "–°—Ç—É–¥–µ–Ω—Ç".
    
    –Ø–∫—â–æ —Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á —ñ —Ö–æ—á–µ—à –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –ø–æ–¥—ñ–π, —Ç–æ —Ç–∏—Å–Ω–∏  "–í–∏–∫–ª–∞–¥–∞—á".  
    
    –ê —è–∫—â–æ —É —Ç–µ–±–µ —î —ñ–Ω—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —Ç–æ —Ç–∏—Å–Ω–∏ –Ω–∞ "–ó–∞–ª–∏—à–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É" —Ç—É—Ç —á–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é —ñ –ø–∏—à–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è - –º–∏ –ø—Ä–æ—á–∏—Ç–∞—î–º–æ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫ —Ç—ñ–ª—å–∫–∏ –º–∞—Ç–∏–º–µ–º–æ –∑–º–æ–≥—É.
    `,
    menuButton
    );
}





  bot.hears(words.wordQuestionnaire, (ctx) => ctx.scene.enter('greeter'));
  stage.hears('‚¨ÖÔ∏è –í–∏—Ö—ñ–¥', (ctx) => {
    ctx.scene.leave();
    getStartMenu(ctx);
  });




  
}